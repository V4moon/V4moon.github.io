<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V4moon&#39;s Blog</title>
  
  <subtitle>专注于渗透测试和APP安全的安全混子</subtitle>
  <link href="https://v4moon.github.io/atom.xml" rel="self"/>
  
  <link href="https://v4moon.github.io/"/>
  <updated>2025-02-09T09:00:23.489Z</updated>
  <id>https://v4moon.github.io/</id>
  
  <author>
    <name>V4moon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>绕过防篡改sign值检测导致APP全局未授权</title>
    <link href="https://v4moon.github.io/2025/02/09/%E7%BB%95%E8%BF%87%E9%98%B2%E7%AF%A1%E6%94%B9sign%E5%80%BC%E6%A3%80%E6%B5%8B%E5%AF%BC%E8%87%B4APP%E5%85%A8%E5%B1%80%E6%9C%AA%E6%8E%88%E6%9D%83/"/>
    <id>https://v4moon.github.io/2025/02/09/%E7%BB%95%E8%BF%87%E9%98%B2%E7%AF%A1%E6%94%B9sign%E5%80%BC%E6%A3%80%E6%B5%8B%E5%AF%BC%E8%87%B4APP%E5%85%A8%E5%B1%80%E6%9C%AA%E6%8E%88%E6%9D%83/</id>
    <published>2025-02-09T08:44:52.000Z</published>
    <updated>2025-02-09T09:00:23.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>手机：pixel3a</p><p>系统版本：android10r2</p><p>frida-server版本：hluda 16.5.1</p><p>app版本：</p><h2 id="sslpinning证书检验"><a href="#sslpinning证书检验" class="headerlink" title="sslpinning证书检验"></a>sslpinning证书检验</h2><p>抓包发现目标app可以本机抓包，转发到bp后回网络错误，猜测估计存在sslpining证书校验，经检测没有frida检测，直接先上objection disable sslpinningg来绕过sslpinning证书。</p><p><img src="/images/image_Pel0vazL1w.png"></p><h2 id="sign值签名校验"><a href="#sign值签名校验" class="headerlink" title="sign值签名校验"></a>sign值签名校验</h2><p>绕过sslpinning证书发现存在sign值对每个参数做签名认证，可以发现修改参数值后，服务器不返回正常数据</p><p><img src="/images/image_yVhax-XIP0.png"></p><p><img src="/images/image_701u8ISXlO.png"></p><p>确认是sign值对参数进行签名，使用LSPosed+算法助手来获取算法堆栈</p><p><img src="/images/image_ZcRZXuC8Ip.png"></p><p>上图可见，存在工具类com. <em>.</em>.utils.r0对参数值进行签名</p><p>com. <em>.</em>.utils.r0</p><p>然后使用objection去hooking该工具类</p><p><img src="/images/image_OKY9WgEs5Z.png"></p><p>发现发包过程中确实会调用该类的方法，按照算法助手所显示，sign参数进行签名调用的a和b两个方法，hooking 这两个方法获取参数值和返回包，</p><p><img src="/images/image_Kwe-SgiMKD.png"></p><p>点击操作功能点，hook掉的方法会显示参数值和调用方法后的结果，至此确认是sign签名参数的函数为com.jzg.jzgoto.phone.utils.r0.b，可以直接编写python的frida脚本hook掉该方法配合mitmproxy来自动签名参数</p><p><img src="/images/image_ai_T_IzQCw.png"></p><p><strong>使用自改脱壳机脱壳</strong></p><p>该app用的是360加固，脱壳后，用jadx打开源码，这里将objection找到的key值2cb <em>-</em> ** <em>-</em>** <em>-</em> ** <em>-e</em>c在jadx上查找</p><p>最终找到确实是在我们上面找到的r0工具类来处理这个算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">r0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;2cb*****-****-****-****-e*********c&quot;</span>.toLowerCase();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">f6919b</span> <span class="operator">=</span> <span class="string">&quot;*****************&quot;</span>.toLowerCase();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;String, String&gt;&gt; &#123;</span><br><span class="line">        a() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;String, String&gt; entry, Map.Entry&lt;String, String&gt; entry2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> entry.getKey().toLowerCase().compareTo(entry2.getKey().toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">a</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(q0.b())) &#123;</span><br><span class="line">            map.put(JThirdPlatFormInterface.KEY_TOKEN, q0.b());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span> || map.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            str = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            List&lt;Map.Entry&lt;String, String&gt;&gt; c2 = c(map);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; c2.size(); i2++) &#123;</span><br><span class="line">                stringBuffer.append(c2.get(i2).toString());</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuffer.append(a);</span><br><span class="line">            str = stringBuffer.toString().toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">b</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] cArr = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            messageDigest.update(bytes);</span><br><span class="line">            <span class="type">byte</span>[] digest = messageDigest.digest();</span><br><span class="line">            <span class="type">char</span>[] cArr2 = <span class="keyword">new</span> <span class="title class_">char</span>[digest.length * <span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b2 : digest) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i2 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i2] = cArr[(b2 &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                i2 = i3 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i3] = cArr[b2 &amp; db.m];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cArr2).toUpperCase();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map.Entry&lt;String, String&gt;&gt; c(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(map.entrySet());</span><br><span class="line">        Collections.sort(arrayList, <span class="keyword">new</span> <span class="title class_">a</span>());</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码分析如下</p><ol><li><strong>类和变量定义</strong>：<ul><li><code>r0</code> 类包含两个静态常量 <code>a</code> 和 <code>f6919b</code>，它们分别是两个字符串的 <code>toLowerCase</code> 形式。</li><li>内部类 <code>a</code> 实现了 <code>Comparator&lt;Map.Entry&lt;String, String&gt;&gt;</code> 接口，用于比较两个 <code>Map.Entry</code> 的键（忽略大小写）。</li></ul></li><li><strong>方法<code>a(Map&lt;String, String&gt; map)</code></strong>：<ul><li>该方法用于生成签名。首先检查 <code>q0.b()</code> 是否为空，如果不为空则将其作为 <code>token</code> 加入到 <code>map</code> 中。</li><li>如果 <code>map</code> 为空或大小为0，则直接返回常量 <code>a</code>。</li><li>否则，将 <code>map</code> 中的所有键值对按键的字母顺序（忽略大小写）排序，并将这些键值对拼接成一个字符串，最后拼接常量 <code>a</code>。</li><li>将拼接后的字符串转换为小写，并调用 <code>b(String str)</code> 方法生成 MD5 签名。</li></ul></li><li><strong>方法<code>b(String str)</code></strong>：<ul><li>该方法用于生成 MD5 签名。首先将输入字符串转换为 <code>UTF-8</code> 字节数组，然后使用 <code>MessageDigest</code> 计算 MD5 哈希值。</li><li>将哈希值转换为十六进制字符串，并返回大写形式的字符串。如果过程中发生异常，则返回 <code>null</code>。</li></ul></li><li><strong>方法<code>c(Map&lt;String, String&gt; map)</code></strong>：<ul><li>该方法用于对 <code>map</code> 中的键值对进行排序。首先将 <code>map</code> 的 <code>entrySet</code> 转换为 <code>ArrayList</code>，然后使用内部类 <code>a</code> 进行排序，最后返回排序后的列表。</li></ul></li></ol><p>回顾之前的objection所hook到的返回值和参数值，可简单判断出使用的是md5加密，脱壳后的代码也验证了是md5加密。</p><p>根据脱壳后的代码，该签名方法是对参数进行排序后，然后进行拼接字符串，最后拼接特殊值2cb3147b-d93c-964b-47ae-eee448c84e3c到最后。</p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>根据以上思路编写python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">flow: http.HTTPFlow</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    url = flow.request.url</span><br><span class="line">    <span class="comment"># 检查目标 URL</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;***.*****.com&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;*.*****.com&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">        <span class="comment"># 获取请求参数</span></span><br><span class="line">        <span class="keyword">if</span> flow.request.urlencoded_form:</span><br><span class="line">            params = flow.request.urlencoded_form.items()</span><br><span class="line">            params_dict = <span class="built_in">dict</span>(params)</span><br><span class="line">            <span class="comment"># print(params_dict)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 排除 sign 参数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;sign&#x27;</span> <span class="keyword">in</span> params_dict:</span><br><span class="line">                <span class="keyword">del</span> params_dict[<span class="string">&#x27;sign&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对参数进行 a-z 顺序排序</span></span><br><span class="line">            sorted_params = <span class="built_in">sorted</span>(params_dict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接参数，包含等号</span></span><br><span class="line">            concatenated_params = <span class="string">&#x27;&#x27;</span>.join([<span class="string">f&quot;<span class="subst">&#123;k.lower()&#125;</span>=<span class="subst">&#123;v.lower()&#125;</span>&quot;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> sorted_params])</span><br><span class="line">            concatenated_params=concatenated_params+<span class="string">&quot;2cb*****-****-****-****-e*********c&quot;</span></span><br><span class="line">            <span class="comment"># 打印加密前的参数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;加密前的参数:&quot;</span>, concatenated_params)</span><br><span class="line">            <span class="comment"># 计算 MD5 并转换为大写</span></span><br><span class="line">            md5_hash = hashlib.md5(concatenated_params.encode()).hexdigest().upper()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;加密后的参数:&quot;</span>, md5_hash)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将计算出的签名值设置为 sign 参数</span></span><br><span class="line">            flow.request.urlencoded_form[<span class="string">&#x27;sign&#x27;</span>] = md5_hash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新请求体</span></span><br><span class="line">            flow.request.content = flow.request.urlencoded_form.encode()</span><br></pre></td></tr></table></figure><p>然后用mitmproxy使用该脚本以及burpsuite设置上游代理。</p><p>使用该方法后可以成功改包和爆破</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h3 id="全站未授权"><a href="#全站未授权" class="headerlink" title="全站未授权"></a>全站未授权</h3><p>访问用户个人信息，可以发现，请求包没有token值，只存在sign值，该值为对参数值做签名后的值，只用来防篡改，没有token鉴权的功能</p><p><img src="/images/image_xNnNXQFcOZ.png"></p><p>通过hook，获取签名算法，利用签名算法脚本做上游代理对参数进行签名可爆破出用户的积分信息</p><p><img src="/images/image_xisWKvj6HW.png"></p><p>经过多个功能点验证，该APP全站点未做鉴权，包括可以使用他人积分，获取其他用户报告，和修改个人信息等等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;手机：pixel3a&lt;/p&gt;
&lt;p&gt;系统版本：android10r2&lt;/p&gt;
&lt;p&gt;frida-server版本：hluda 16.5.1&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
